services:

  manager_php-fpm:
    hostname: ${DOMAIN}
    build:
      context: docker/php-fpm
      dockerfile: Dockerfile
      args:
        - INSTALL_XDEBUG=${INSTALL_XDEBUG}
    ports:
      - '9011:9011'
    volumes:
      - ./app:/app:rw
    depends_on:
      manager_redis:
        condition: service_started
      manager_db:
        condition: service_healthy
    working_dir: /app

  manager_supervisor:
    hostname: ${DOMAIN}
    working_dir: /app
    build:
      context: docker/supervisor
      dockerfile: Dockerfile
    restart: always
    depends_on:
      manager_redis:
        condition: service_started
      manager_db:
        condition: service_healthy
    command: bash -c "/usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf"
    volumes:
      - ./app:/app:rw
      - ./docker/supervisor/conf.d:/etc/supervisor/conf.d
      - ./docker/supervisor/log:/var/log/supervisor

  manager_php-cli:
    hostname: ${DOMAIN}
    working_dir: /app
    build:
      context: docker/php-cli
      dockerfile: Dockerfile
    command: bash -c "composer install && php bin/console --no-interaction doctrine:migrations:migrate"
    depends_on:
      manager_redis:
        condition: service_started
      manager_db:
        condition: service_healthy
    volumes:
      - ./app:/app:rw

  manager_nginx:
    hostname: ${DOMAIN}
    image: nginx:1.25.4
    depends_on:
      - manager_php-fpm
    volumes:
      - ./app:/app:rw
      - ./docker/nginx/logs:/var/log/nginx:rw
      - ./docker/nginx/hosts:/etc/nginx/conf.d
    networks:
      default:
        ipv4_address: ${HOST_NGINX}

  manager_redis:
    hostname: ${DOMAIN}
    working_dir: /app
    image: redis:7.2.1
    restart: always
    volumes:
      - ./docker/redis/data/:/data:rw

  manager_db:
    image: postgres:17-alpine
    shm_size: 128mb
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "${DB_USER}" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./docker/db/data:/var/lib/postgresql/data
    ports:
      - ${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}
    command: [ "postgres", "-c", "logging_collector=on", "-c", "log_directory=/var/lib/postgresql/data/pg_log", "-c", "log_filename=postgresql.log", "-c", "log_statement=all" ]

  manager_rabbitmq:
    image: rabbitmq:4.0-management-alpine
    restart: always
    healthcheck:
      start_period: 30s
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 1m
      timeout: 3s
      retries: 30
    ports:
      - ${RABBITMQ_INTERNAL_PORT}:${RABBITMQ_INTERNAL_PORT}      # для общения с приложением
      - ${RABBITMQ_EXTERNAL_PORT}:${RABBITMQ_EXTERNAL_PORT}    # для панели управления
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}

networks:
  default:
    ipam:
      config:
        - subnet: ${NETWORK}
